{
  "name": "Flowimageloader",
  "tagline": "",
  "body": "# Introduction\r\nFlowImageLoader is very friendly to developer. Because every thing is intuitive and under your control.\r\n\r\n# Usage\r\n\r\n```\r\ncompile 'com.walfud:flowimageloader:1.0.0'\r\n```\r\n\r\n## Basic\r\n\r\n#### Load Image With Cache\r\n```java\r\nFlowImageLoader.with(getApplicationContext())\r\n      .load(Uri.parse(\"https://raw.githubusercontent.com/walfud/flowimageloader/master/doc/rose.png\"))\r\n      .cache()\r\n      .into(imageView)\r\n      .pls();\r\n```\r\n\r\n#### Load Image & Do Some Transformations before Cache\r\n```java\r\nFlowImageLoader.with(getApplicationContext())\r\n      .load(Uri.parse(\"https://raw.githubusercontent.com/walfud/flowimageloader/master/doc/rose.png\"))\r\n      .resize(200, 100)\r\n      .round(3, 3)\r\n      .cache()\r\n      .into(imageView)\r\n      .pls();\r\n```\r\nAll transformations are made in sequence you call them.\r\n\r\n## Syntax Sugar\r\nThere are some 'flowers' makes your work easy. The 'flower' is an wrapper of `FlowImageLoader`, which aimed to meet the most common use. Usually, the 'flowers' does the following:\r\n* Load image from url.\r\n* Transform image to fit the `ImageView`. (If widget can't get bound, 'flowers' will try it later. Timeout is 2 seconds)\r\n* Set the transformed image to widget.\r\n* Cache the transformed image in order to future use.\r\n\r\nSo... It's very convenient to load network image to an `ImageView` with just one line code!\r\n\r\nSee the magic below.\r\n\r\n#### Rose\r\n`Rose` is rectangle with rounded.\r\n```java\r\nnew Rose(imageView).open(url);\r\n```\r\n![effect_rose](https://raw.githubusercontent.com/walfud/flowimageloader/master/doc/effect_rose.png)\r\n\r\n#### Sunflower\r\n`Sunflower` is circled one.\r\n```java\r\nnew Rose(imageView).open(url);\r\n```\r\n![effect_sunflower](https://raw.githubusercontent.com/walfud/flowimageloader/master/doc/effect_sunflower.png)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}